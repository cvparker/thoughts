Here I am trying to follow the steps of Stefan Kalkowski (https://genodians.org/skalk/2021-04-06-dde-linux-experiments) to try to port the ATH9K (AR9271) driver to Sculpt.

Although it was suggested to try to split the functionality of the current driver, I think that porting the whole thing at once makes more sense. Ultimately, I don't see the need for running the ieee80211 facilities differently from the driver itself. That would make sense under a scenario where you wrote from scratch - because you get code re-use from not needing a new ieee80211 handling code for each driver. But this division already exists in Linux, so the advantages are reduced to code size and the security of running in a different component. The latter point I don't think is worth it - if either the 80211 or HW layers go down you probably have to reset everything, and each one is comparably security-critical. So the best case might be what I did anyway with the port of the HelenOS driver, to have a shared library handling ieee80211. But probably that will happen after I get the thing working, if that every happens.

So, to skalk's instrucions:

The first step is to get the driver built under Linux. I'd never compiled the Linux kernel before, but there's lot's of instructions online of how to do it. I choose 5.7.0 Linux kernel to copy the original. I'm not sure if this version is special or not, but why rock the boat this early? The hardest part of things was to get the configuration correct. Kernel config is an unfortunate situation that's doesn't have a clear default (probably it couldn't, given how many purposes there are for Linux). Both "choose 0 options" and "choose all options" are obviously poor choices as well. What I ended up doing is copying the config from my existing 5.4.0 Mint kernel and then it only asks you about the changes. These are not so many, and then you need to "make bzImage -j4; make modules -j4; sudo make modules_install INSTALL_MOD_STRIP=1; sudo make install". If you leave off INSTALL_MOD_STRIP=1 you will find the hard way as I did that the resulting initrd is so large that GRUB will refuse to load it - the boot will fail.

Now, the instructions are even trickier, because it wants us to build a kernel with no modules, and Mint includes lot's of modules by default. You can lsmod to find which ones are in use but there's a catch: the module name (e.g. uvcvideo) is different from the configuration options (e.g. CONFIG_USB_VIDEO_CLASS). Sometimes they are very different. So, either you put all modules into the kernel (probably crazy?), or there is a painstaking process of running lsmod, running modinfo to find the source directory, and then scanning the Makefile in that source directory for lines that connect the module name to the configuration option. I was able to automate this, and eventually wrote a ".config" for the Linux kernel with no modules (everything either internal or disabled). This booted (I'm using it right now), but the initrd it produces doesn't have the AR9271 firmware (probably because the initrd scripts get concerned over lack of modules), so initially the device is not useable. That's fine, however, because if you re-plug it after a full boot the system will find the firmware. [UPDATE: apparently there is an option called "localyesconfig" that will save this hassle!]

So, next step: to create a Genode project based on this kernel
